{"remainingRequest":"/media/j/Новый том/js/forOks/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/media/j/Новый том/js/forOks/node_modules/cache-loader/dist/cjs.js??ref--0-0!/media/j/Новый том/js/forOks/node_modules/vue-loader/lib/index.js??vue-loader-options!/media/j/Новый том/js/forOks/src/sections/Leaders.vue?vue&type=template&id=570c7ce2&","dependencies":[{"path":"/media/j/Новый том/js/forOks/src/sections/Leaders.vue","mtime":1604750624600},{"path":"/media/j/Новый том/js/forOks/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/j/Новый том/js/forOks/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/media/j/Новый том/js/forOks/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/j/Новый том/js/forOks/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}